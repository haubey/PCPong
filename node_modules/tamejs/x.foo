#!/usr/bin/env node
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

var fs = require ('fs');

function caseCmp (a, b) {
    return a.index () - b.index ();
};

function Case (index, nm, file) {
    this._nm = nm;
    this._file = file;
    this._index = index;

    this.index = function () { return this._index; }

    this.run = function (cb) {
	    var ret = true;
	    var x = require ("../" + this._file);
	    for (var c in x) {
	        await { x[c].run (defer ());}
	        try { 
		        x[c].check ();
		        console.log (this._nm + ": passed");
	        } catch (e) {
		        console.log (this._nm + ": " + c + ": regtest failed: " + e);
		        ret = false;
	        }
	    }
	    cb (ret);
    };
    
    return this;
};

function TamedCase (index, prfx, infile, outfile) {
    var that = new Case (index, prfx + infile, prfx + outfile);
    that._infile = prfx + infile;

    that.compile = function (ev) {
        var fs = require ('fs');
        var Engine = require ('../lib/engine').Engine;
        var engine = new Engine (this._infile);
        await { engine.readInput (defer ()); }
	    engine.parse ();
	    var outdat = engine.compile ().formatOutput ();
        await { fs.writeFile (this._file, outdat, defer (var err)); }
	    if (err) throw err;
        ev();
    };

    return that ;
};

function JsCase (index, file) {
    var that = new Case (index, file, file);
    that.compile = function (ev) { ev(); };
    return that;
};

function read_cases (ev) {
    var tests = [];
    var res = [];
    var prfx = "test/cases/";
    await { fs.readdir ('test/cases/', defer (var err, files)); }
    if (err) throw err;

	// Don't run cases that were output by the tamejs compiler
    var rxx = new RegExp ('^(\\d+)([^.]*)\\.(t)?js$');
    for (f in files) {
        var file = files[f];
	    var m = file.match(rxx);
	    if (m) {
            var index = m[1];
	        if (m[3]) {
		        tests.push (new TamedCase (index, prfx, file, 
                                           m[1] + ".out.js"));
	        } else {
		        tests.push (new JsCase (index, prfx + file));
	        }
	    }
    }
    tests.sort (caseCmp);
    ev(tests);
};

function do_cases (ev) {
    await { read_cases (defer (var cases)); }
    var tot = 0;
    var good = 0;
    for (var i in cases) {
	    await { cases[i].compile (defer ()); }
	    tot++;
	    await { cases[i].run (defer(var res)); }
	    if (res) {
	        good ++;
	    }
    }
    if (tot == good) {
	    console.log ("All " + tot + " tests passed! YES!");
    } else {
	    console.log ("XXX only " + good + "/" + tot + " tessed pased. BOO!");
    }
    ev();
};

await { do_cases (defer ()); }



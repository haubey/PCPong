var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    "use strict" ;
    
    var slots = { } ;
    var n = 10 ;
    var assert = require ( "assert" ) ;
    
    exports [ "test await with no curlies" ] = {
    
    run :
    function  (cb) {
        var __tame_defer_cb = tame.findDeferCb ([cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_1 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_2 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_k_implicit = {};
                var i = 0;
                var __tame_fn_3 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_fn_4 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        i ++
                        tame.callChain([__tame_fn_3, __tame_k]);
                        tame.setActiveCb (null);
                    };
                    __tame_k_implicit.k_break = __tame_k;
                    __tame_k_implicit.k_continue = function() { __tame_fn_4(__tame_k); };
                    if (i < n) {
                        var __tame_fn_5 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                            var __tame_fn_6 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                var __tame_defers = new tame.Deferrals (__tame_k);
                                var __tame_fn_7 = function (__tame_k) {
                                    tame.setActiveCb (__tame_defer_cb);
                                    setTimeout (
                                    __tame_defers.defer ( { 
                                        parent_cb : __tame_defer_cb,
                                        line : 13,
                                        file : "test/cases/21.tjs"
                                    } )
                                    , 3 * Math . random ( ) ) ;
                                    tame.callChain([__tame_k]);
                                    tame.setActiveCb (null);
                                };
                                __tame_fn_7(tame.end);
                                __tame_defers._fulfill();
                                tame.setActiveCb (null);
                            };
                            var __tame_fn_8 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                slots [ i ] = 1 ;
                                tame.callChain([__tame_k]);
                                tame.setActiveCb (null);
                            };
                            tame.callChain([__tame_fn_6, __tame_fn_8, __tame_k]);
                            tame.setActiveCb (null);
                        };
                        tame.callChain([__tame_fn_5, __tame_fn_4, __tame_k]);
                    } else {
                        tame.callChain([__tame_k]);
                    }
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_3, __tame_k]);
                tame.setActiveCb (null);
            };
            var __tame_fn_9 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                cb ( ) ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_2, __tame_fn_9, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_1, __tame_k]);
        tame.setActiveCb (null);
    }
    ,
    
    check :
    function  () {
         for (var i = 0 ; i < n ; i ++) {
            assert . ok ( slots [ i ] , "slot[" + i + "] is set" ) ;
        }
    }
    } ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
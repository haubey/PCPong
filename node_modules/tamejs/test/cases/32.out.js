var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    "use strict" ;
    
    var assert = require ( "assert" ) ;
    var ok = false ;
    function foo (autocb) {
        var __tame_defer_cb = tame.findDeferCb ([autocb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_1 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_2 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_defers = new tame.Deferrals (__tame_k);
                var __tame_fn_3 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    setTimeout (
                    __tame_defers.defer ( { 
                        func_name : "foo",
                        parent_cb : __tame_defer_cb,
                        line : 10,
                        file : "test/cases/32.tjs"
                    } )
                    , 1 ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                __tame_fn_3(tame.end);
                __tame_defers._fulfill();
                tame.setActiveCb (null);
            };
            var __tame_fn_4 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                    autocb(true);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_2, __tame_fn_4, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_1, autocb, __tame_k]);
        tame.setActiveCb (null);
    }
    exports [ "simple autocb operations" ] = {
    
    run :
    function  (autocb) {
        var __tame_defer_cb = tame.findDeferCb ([autocb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_5 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var b;
            var __tame_fn_6 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_defers = new tame.Deferrals (__tame_k);
                var __tame_fn_7 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    foo (
                    __tame_defers.defer ( { 
                        assign_fn : 
                            function () {
                                b = arguments[0];
                            }
                            ,
                        parent_cb : __tame_defer_cb,
                        line : 17,
                        file : "test/cases/32.tjs"
                    } )
                    ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                __tame_fn_7(tame.end);
                __tame_defers._fulfill();
                tame.setActiveCb (null);
            };
            var __tame_fn_8 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                ok = b ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_6, __tame_fn_8, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_5, autocb, __tame_k]);
        tame.setActiveCb (null);
    }
    ,
    
    check :
    function  () {
        assert . ok ( ok , "ok was set via autocb" ) ;
    }
    } ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    "use strict" ;
    
    var assert = require ( "assert" ) ;
    
    var res = 0 ;
    var i = 0 ;
    function Class () {
        this . _v = [ ] ;
         for (var i = 0 ; i < 10 ; i ++) {
            this . _v . push ( i ) ;
        }
        this . run =
        function  (cb) {
            var __tame_defer_cb = tame.findDeferCb ([cb]);
            tame.setActiveCb (__tame_defer_cb);
            var __tame_this = this;
            var __tame_fn_9 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                __tame_this . _u = [ ] ;
                var __tame_fn_1 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_fn_2 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        var __tame_k_implicit = {};
                        var __tame_for_in_array = [];
                        for (var i in __tame_this . _v) { __tame_for_in_array.push(i); }
                        var __tame_for_in_iter = 0;
                        var __tame_fn_3 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                            var __tame_fn_4 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                __tame_for_in_iter++
                                tame.callChain([__tame_fn_3, __tame_k]);
                                tame.setActiveCb (null);
                            };
                            __tame_k_implicit.k_break = __tame_k;
                            __tame_k_implicit.k_continue = function() { __tame_fn_4(__tame_k); };
                            if (__tame_for_in_iter < __tame_for_in_array.length) {
                                var __tame_fn_7 = function (__tame_k) {
                                    tame.setActiveCb (__tame_defer_cb);
                                    var i = __tame_for_in_array[__tame_for_in_iter];
                                    __tame_this . _u . push ( __tame_this . _v [ i ] ) ;
                                    var __tame_fn_5 = function (__tame_k) {
                                        tame.setActiveCb (__tame_defer_cb);
                                        var __tame_defers = new tame.Deferrals (__tame_k);
                                        var __tame_fn_6 = function (__tame_k) {
                                            tame.setActiveCb (__tame_defer_cb);
                                            setTimeout (
                                            __tame_defers.defer ( { 
                                                parent_cb : __tame_defer_cb,
                                                line : 19,
                                                file : "test/cases/16.tjs"
                                            } )
                                            , 10*Math . random ( ) ) ;
                                            tame.callChain([__tame_k]);
                                            tame.setActiveCb (null);
                                        };
                                        __tame_fn_6(tame.end);
                                        __tame_defers._fulfill();
                                        tame.setActiveCb (null);
                                    };
                                    tame.callChain([__tame_fn_5, __tame_k]);
                                    tame.setActiveCb (null);
                                };
                                tame.callChain([__tame_fn_7, __tame_fn_4, __tame_k]);
                            } else {
                                tame.callChain([__tame_k]);
                            }
                            tame.setActiveCb (null);
                        };
                        tame.callChain([__tame_fn_3, __tame_k]);
                        tame.setActiveCb (null);
                    };
                    var __tame_fn_8 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        cb ( ) ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    tame.callChain([__tame_fn_2, __tame_fn_8, __tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_1, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_9, __tame_k]);
            tame.setActiveCb (null);
        }
        ;
        this . check =
        function  () {
            return JSON . stringify ( this . _v ) == JSON . stringify ( this . _u );
        }
        ;
    }
    ;
    
    var obj = new Class ( ) ;
    
    exports [ "a test of for (var i in this._foo)" ] = {
    
    run :
    function  (cb) {
        var __tame_defer_cb = tame.findDeferCb ([cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_10 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_11 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_defers = new tame.Deferrals (__tame_k);
                var __tame_fn_12 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    obj . run (
                    __tame_defers.defer ( { 
                        parent_cb : __tame_defer_cb,
                        line : 35,
                        file : "test/cases/16.tjs"
                    } )
                    ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                __tame_fn_12(tame.end);
                __tame_defers._fulfill();
                tame.setActiveCb (null);
            };
            var __tame_fn_13 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                cb ( ) ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_11, __tame_fn_13, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_10, __tame_k]);
        tame.setActiveCb (null);
    }
    ,
    
    check :
    function  () {
        assert . ok ( obj . check ( ) , "made it through 10 times" ) ;
    }
    } ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
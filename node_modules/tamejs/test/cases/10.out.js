var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    "use strict" ;
    
    var assert = require ( "assert" ) ;
    
    var res = 0 ;
    function foo (cb) {
        var __tame_defer_cb = tame.findDeferCb ([cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_1 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_2 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_defers = new tame.Deferrals (__tame_k);
                var __tame_fn_3 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    setTimeout (
                    __tame_defers.defer ( { 
                        func_name : "foo",
                        parent_cb : __tame_defer_cb,
                        line : 10,
                        file : "test/cases/10.tjs"
                    } )
                    , 10 * Math . random ( ) ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                __tame_fn_3(tame.end);
                __tame_defers._fulfill();
                tame.setActiveCb (null);
            };
            var __tame_fn_4 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                res ++ ;
                cb ( ) ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_2, __tame_fn_4, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_1, __tame_k]);
        tame.setActiveCb (null);
    }
    ;
    
    exports [ "parser variations" ] = {
    
    run :
    function  (cb) {
        var __tame_defer_cb = tame.findDeferCb ([cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_5 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_6 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_fn_7 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_defers = new tame.Deferrals (__tame_k);
                    var __tame_fn_8 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        foo (
                        __tame_defers.defer ( { 
                            parent_cb : __tame_defer_cb,
                            line : 18,
                            file : "test/cases/10.tjs"
                        } )
                        ) ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    __tame_fn_8(tame.end);
                    __tame_defers._fulfill();
                    tame.setActiveCb (null);
                };
                if (true) {
                    tame.callChain([__tame_fn_7, __tame_k]);
                } else {
                    tame.callChain([__tame_k]);
                }
                tame.setActiveCb (null);
            };
            var __tame_fn_9 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                res ++ ;
                cb ( ) ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_6, __tame_fn_9, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_5, __tame_k]);
        tame.setActiveCb (null);
    }
    ,
    check :
    function  () {
        assert . equal ( res , 2 , "both increments fired" ) ;
    }
    } ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
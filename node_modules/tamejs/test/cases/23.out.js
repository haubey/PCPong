var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    "use strict" ;
    
    var slots = { } ;
    var n = 10 ;
    var assert = require ( "assert" ) ;
    
    var slots = [ ] , x = { } , jams = [ ] ;
    
    var hard = { foo : { bar : [ { baz : [ ] } ] } } ;
    function helper (i, cb) {
        var __tame_defer_cb = tame.findDeferCb ([i, cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_1 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_2 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_defers = new tame.Deferrals (__tame_k);
                var __tame_fn_3 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    setTimeout (
                    __tame_defers.defer ( { 
                        func_name : "helper",
                        parent_cb : __tame_defer_cb,
                        line : 14,
                        file : "test/cases/23.tjs"
                    } )
                    , i ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                __tame_fn_3(tame.end);
                __tame_defers._fulfill();
                tame.setActiveCb (null);
            };
            var __tame_fn_4 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                cb ( i , 7*i , 2*i , 3*i ) ;
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_2, __tame_fn_4, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_1, __tame_k]);
        tame.setActiveCb (null);
    }
    exports [ "test capture of defer slots" ] = {
    
    
    run :
    function  (cb) {
        var __tame_defer_cb = tame.findDeferCb ([cb]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_5 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var __tame_fn_6 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                 for (var i = 0 ; i < n ; i ++) {
                    x [ i ] = i ;
                }
                tame.callChain([__tame_k]);
                tame.setActiveCb (null);
            };
            var __tame_fn_11 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var dummy = { puppy : 0 } ;
                var __tame_fn_7 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_fn_8 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        var __tame_defers = new tame.Deferrals (__tame_k);
                        var __tame_fn_9 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                             for (var i = 0 ; i < n ; i ++) {
                                helper ( i ,
                                __tame_defers.defer ( { 
                                    assign_fn : 
                                        (function (__tame_slot_0, __tame_slot_1, __tame_slot_2, __tame_slot_3, __tame_slot_4, __tame_slot_5, __tame_slot_6) {
                                            return function () { 
                                                __tame_slot_0[__tame_slot_1] = arguments[0];
                                                __tame_slot_1. puppy = arguments[1];
                                                __tame_slot_3[__tame_slot_4] = arguments[2];
                                                __tame_slot_5[__tame_slot_6] = arguments[3];
                                            }
                                            ;
                                        }) (slots, x [ i ], dummy , jams, i, hard . foo [ "bar" ] [ 0 ] . baz, i),
                                    parent_cb : __tame_defer_cb,
                                    line : 29,
                                    file : "test/cases/23.tjs"
                                } )
                                ) ;
                            }
                            tame.callChain([__tame_k]);
                            tame.setActiveCb (null);
                        };
                        __tame_fn_9(tame.end);
                        __tame_defers._fulfill();
                        tame.setActiveCb (null);
                    };
                    var __tame_fn_10 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        cb ( ) ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    tame.callChain([__tame_fn_8, __tame_fn_10, __tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_7, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_6, __tame_fn_11, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_5, __tame_k]);
        tame.setActiveCb (null);
    }
    ,
    
    check :
    function  () {
         for (var i = 0 ; i < n ; i ++) {
            assert . equal ( slots [ i ] + jams [ i ] + hard . foo . bar [ 0 ] . baz [ i ] ,
            6 *i , "slot[" + i + "] is " + 6 *i ) ;
        }
    }
    } ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
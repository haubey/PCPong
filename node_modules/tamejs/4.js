var tame = require('tamejs').runtime;
var __tame_fn_0 = function (__tame_k) {
    function burn (cb) {
        var __tame_this = this;
        var __tame_fn_5 = function (__tame_k) {
            throw new Error ( "burning man!" ) ;
            var __tame_fn_1 = function (__tame_k) {
                var __tame_fn_2 = function (__tame_k) {
                    var __tame_ev = new tame.Event (__tame_k);
                    var __tame_fn_3 = function (__tame_k) {
                        setTimeout (
                        __tame_ev.defer ()
                        , 10 ) ;
                        tame.callChain([__tame_k]);
                    };
                    __tame_fn_3(tame.end);
                    __tame_ev.fulfill();
                };
                var __tame_fn_4 = function (__tame_k) {
                    cb ( ) ;
                    tame.callChain([__tame_k]);
                };
                tame.callChain([__tame_fn_2, __tame_fn_4, __tame_k]);
            };
            tame.callChain([__tame_fn_1, __tame_k]);
        };
        tame.callChain([__tame_fn_5, __tame_k]);
    }
    function foo () {
        var __tame_this = this;
        var __tame_fn_6 = function (__tame_k) {
                try {
                    var __tame_fn_7 = function (__tame_k) {
                        var __tame_ev = new tame.Event (__tame_k);
                        var __tame_fn_8 = function (__tame_k) {
                            burn (
                            __tame_ev.defer ()
                            ) ;
                            tame.callChain([__tame_k]);
                        };
                        __tame_fn_8(tame.end);
                        __tame_ev.fulfill();
                    };
                    tame.callChain([__tame_fn_7, __tame_k]);
                }
                catch (e) {
                    var __tame_fn_9 = function (__tame_k) {
                        console .log ( "whoopsie! " + e ) ;
                        tame.callChain([__tame_k]);
                    };
                    tame.callChain([__tame_fn_9, __tame_k]);
                }
        };
        tame.callChain([__tame_fn_6, __tame_k]);
    }
    foo ( ) ;
    tame.callChain([__tame_k]);
};
__tame_fn_0 (tame.end);
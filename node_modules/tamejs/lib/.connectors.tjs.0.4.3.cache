var tame = require('tamejs').runtime;
var __tame_defer_cb = null;
var __tame_fn_0 = function (__tame_k) {
    tame.setActiveCb (__tame_defer_cb);
    function _timeout (cb, t, res, tmp) {
        var __tame_defer_cb = tame.findDeferCb ([cb, t, res, tmp]);
        tame.setActiveCb (__tame_defer_cb);
        var __tame_this = this;
        var __tame_fn_7 = function (__tame_k) {
            tame.setActiveCb (__tame_defer_cb);
            var rv = new tame . Rendezvous ( ) ;
            var arr ;
            tmp [ 0 ] = rv . id ( true ) .
            __tame_defers.defer ( { 
                assign_fn : 
                    function () {
                        arr = tame.restArr (arguments, 0);
                    }
                    ,
                func_name : "_timeout",
                parent_cb : __tame_defer_cb,
                line : 9,
                file : "/home/max/node/tamejs/lib/connectors.tjs"
            } )
            ;
            setTimeout ( rv . id ( false ) .
            __tame_defers.defer ( { 
                func_name : "_timeout",
                parent_cb : __tame_defer_cb,
                line : 10,
                file : "/home/max/node/tamejs/lib/connectors.tjs"
            } )
            , t ) ;
            var __tame_fn_1 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var which;
                var __tame_fn_2 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_defers = new tame.Deferrals (__tame_k);
                    var __tame_fn_3 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        rv . wait (
                        __tame_defers.defer ( { 
                            assign_fn : 
                                function () {
                                    which = arguments[0];
                                }
                                ,
                            func_name : "_timeout",
                            parent_cb : __tame_defer_cb,
                            line : 11,
                            file : "/home/max/node/tamejs/lib/connectors.tjs"
                        } )
                        ) ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    __tame_fn_3(tame.end);
                    __tame_defers._fulfill();
                    tame.setActiveCb (null);
                };
                var __tame_fn_4 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_fn_5 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        res [ 0 ] = which ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    if (res) {
                        tame.callChain([__tame_fn_5, __tame_k]);
                    } else {
                        tame.callChain([__tame_k]);
                    }
                    tame.setActiveCb (null);
                };
                var __tame_fn_6 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    cb . apply ( null , arr ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_2, __tame_fn_4, __tame_fn_6, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_1, __tame_k]);
            tame.setActiveCb (null);
        };
        tame.callChain([__tame_fn_7, __tame_k]);
        tame.setActiveCb (null);
    }
    ;
    function timeout (cb, t, res) {
        var tmp = [ ] ;
        _timeout ( cb , t , res , tmp ) ;
        return tmp [ 0 ];
    }
    ;
    function Pipeliner (window, delay) {
        this . _window = window || 1 ;
        this . _delay = delay || 0 ;
        this . _queue = [ ] ;
        this . _n_out = 0 ;
        this . _cb = null ;
        this . waitInQueue =
        function  (cb) {
            var __tame_defer_cb = tame.findDeferCb ([cb]);
            tame.setActiveCb (__tame_defer_cb);
            var __tame_this = this;
            var __tame_fn_8 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_fn_9 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_k_implicit = {};
                    var __tame_fn_10 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        if (__tame_this . _n_out > __tame_this . _window) {
                            var __tame_fn_11 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                var __tame_defers = new tame.Deferrals (__tame_k);
                                var __tame_fn_12 = function (__tame_k) {
                                    tame.setActiveCb (__tame_defer_cb);
                                    __tame_this . _cb =
                                    __tame_defers.defer ( { 
                                        parent_cb : __tame_defer_cb,
                                        line : 43,
                                        file : "/home/max/node/tamejs/lib/connectors.tjs"
                                    } )
                                    ;
                                    tame.callChain([__tame_k]);
                                    tame.setActiveCb (null);
                                };
                                __tame_fn_12(tame.end);
                                __tame_defers._fulfill();
                                tame.setActiveCb (null);
                            };
                            tame.callChain([__tame_fn_11, __tame_fn_10, __tame_k]);
                        } else {
                            tame.callChain([__tame_k]);
                        }
                        tame.setActiveCb (null);
                    };
                    __tame_k_implicit.k_break = __tame_k;
                    __tame_k_implicit.k_continue = function() { __tame_fn_10(__tame_k); };
                    tame.callChain([__tame_fn_10, __tame_k]);
                    tame.setActiveCb (null);
                };
                var __tame_fn_18 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    __tame_this . _n_out ++ ;
                    var __tame_fn_13 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        var __tame_fn_14 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                            var __tame_fn_15 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                var __tame_defers = new tame.Deferrals (__tame_k);
                                var __tame_fn_16 = function (__tame_k) {
                                    tame.setActiveCb (__tame_defer_cb);
                                    setTimeout (
                                    __tame_defers.defer ( { 
                                        parent_cb : __tame_defer_cb,
                                        line : 52,
                                        file : "/home/max/node/tamejs/lib/connectors.tjs"
                                    } )
                                    , __tame_this . _delay ) ;
                                    tame.callChain([__tame_k]);
                                    tame.setActiveCb (null);
                                };
                                __tame_fn_16(tame.end);
                                __tame_defers._fulfill();
                                tame.setActiveCb (null);
                            };
                            if (__tame_this . _delay) {
                                tame.callChain([__tame_fn_15, __tame_k]);
                            } else {
                                tame.callChain([__tame_k]);
                            }
                            tame.setActiveCb (null);
                        };
                        var __tame_fn_17 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                            cb ( ) ;
                            tame.callChain([__tame_k]);
                            tame.setActiveCb (null);
                        };
                        tame.callChain([__tame_fn_14, __tame_fn_17, __tame_k]);
                        tame.setActiveCb (null);
                    };
                    tame.callChain([__tame_fn_13, __tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_9, __tame_fn_18, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_8, __tame_k]);
            tame.setActiveCb (null);
        }
        ;
        this . _defer =
        function  (out, deferArgs) {
            var __tame_defer_cb = tame.findDeferCb ([out, deferArgs]);
            tame.setActiveCb (__tame_defer_cb);
            var __tame_this = this;
            var __tame_fn_19 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_fn_20 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_defers = new tame.Deferrals (__tame_k);
                    var __tame_fn_21 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        var voidCb =
                        __tame_defers.defer ( { 
                            parent_cb : __tame_defer_cb,
                            line : 70,
                            file : "/home/max/node/tamejs/lib/connectors.tjs"
                        } )
                        ;
                        out [ 0 ] =
                        function  () {
                            if (deferArgs . assign_fn) {
                                deferArgs . assign_fn . apply ( null , arguments ) ;
                            } else {
                            }
                            voidCb ( ) ;
                        }
                        ;
                        tame.callChain([__tame_k]);
                        tame.setActiveCb (null);
                    };
                    __tame_fn_21(tame.end);
                    __tame_defers._fulfill();
                    tame.setActiveCb (null);
                };
                var __tame_fn_24 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    __tame_this . _n_out -- ;
                    var __tame_fn_22 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        var __tame_fn_23 = function (__tame_k) {
                            tame.setActiveCb (__tame_defer_cb);
                            var tmp = __tame_this . _cb ;
                            __tame_this . _cb = null ;
                            tmp ( ) ;
                            tame.callChain([__tame_k]);
                            tame.setActiveCb (null);
                        };
                        if (__tame_this . _cb) {
                            tame.callChain([__tame_fn_23, __tame_k]);
                        } else {
                            tame.callChain([__tame_k]);
                        }
                        tame.setActiveCb (null);
                    };
                    tame.callChain([__tame_fn_22, __tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_20, __tame_fn_24, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_19, __tame_k]);
            tame.setActiveCb (null);
        }
        ;
        this [ "defer" ] =
        function  (deferArgs) {
            var tmp = [ ] ;
            this . _defer ( tmp , deferArgs ) ;
            return tmp [ 0 ];
        }
        ;
        this . flush =
        function  (cb) {
            var __tame_defer_cb = tame.findDeferCb ([cb]);
            tame.setActiveCb (__tame_defer_cb);
            var __tame_this = this;
            var __tame_fn_25 = function (__tame_k) {
                tame.setActiveCb (__tame_defer_cb);
                var __tame_fn_26 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    var __tame_k_implicit = {};
                    var __tame_fn_27 = function (__tame_k) {
                        tame.setActiveCb (__tame_defer_cb);
                        if (__tame_this . _n_out) {
                            var __tame_fn_28 = function (__tame_k) {
                                tame.setActiveCb (__tame_defer_cb);
                                var __tame_defers = new tame.Deferrals (__tame_k);
                                var __tame_fn_29 = function (__tame_k) {
                                    tame.setActiveCb (__tame_defer_cb);
                                    __tame_this . _cb =
                                    __tame_defers.defer ( { 
                                        parent_cb : __tame_defer_cb,
                                        line : 108,
                                        file : "/home/max/node/tamejs/lib/connectors.tjs"
                                    } )
                                    ;
                                    tame.callChain([__tame_k]);
                                    tame.setActiveCb (null);
                                };
                                __tame_fn_29(tame.end);
                                __tame_defers._fulfill();
                                tame.setActiveCb (null);
                            };
                            tame.callChain([__tame_fn_28, __tame_fn_27, __tame_k]);
                        } else {
                            tame.callChain([__tame_k]);
                        }
                        tame.setActiveCb (null);
                    };
                    __tame_k_implicit.k_break = __tame_k;
                    __tame_k_implicit.k_continue = function() { __tame_fn_27(__tame_k); };
                    tame.callChain([__tame_fn_27, __tame_k]);
                    tame.setActiveCb (null);
                };
                var __tame_fn_30 = function (__tame_k) {
                    tame.setActiveCb (__tame_defer_cb);
                    cb ( ) ;
                    tame.callChain([__tame_k]);
                    tame.setActiveCb (null);
                };
                tame.callChain([__tame_fn_26, __tame_fn_30, __tame_k]);
                tame.setActiveCb (null);
            };
            tame.callChain([__tame_fn_25, __tame_k]);
            tame.setActiveCb (null);
        }
        ;
        this . __tame_defers = this ;
    }
    ;
    
    
    
    exports . timeout = timeout ;
    exports . Pipeliner = Pipeliner ;
    tame.callChain([__tame_k]);
    tame.setActiveCb (null);
};
__tame_fn_0 (tame.end);
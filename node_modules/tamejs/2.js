var tame = require('tamejs').runtime;
var __tame_fn_5 = function (__tame_k) {
    var dns = require ( 'dns' )
    
    var hosts = [ "nytimes.com" , "google.com" ] ;
    var ips = [ ] , errs = [ ] ;
    var which ;
    var rv = new tame . Rendezvous ( ) ;
    var __tame_fn_0 = function (__tame_k) {
        var __tame_fn_1 = function (__tame_k) {
             for (var i in hosts) {
                dns . resolve ( hosts [ i ] , rv . id ( i ) .
                __tame_defers.defer ( { 
                    assign_fn : 
                    (function (__tame_slot_0, __tame_slot_1, __tame_slot_2, __tame_slot_3) {
                        return function () { 
                            __tame_slot_0[__tame_slot_1] = arguments[0];
                            __tame_slot_2[__tame_slot_3] = arguments[1];
                        }
                        ;
                    }) (errs, i, ips, i)
                } )
                ) ;
            }
            tame.callChain([__tame_k]);
        };
        var __tame_fn_2 = function (__tame_k) {
            var __tame_defers = new tame.Defers (__tame_k);
            var __tame_fn_3 = function (__tame_k) {
                rv . wait (
                __tame_defers.defer ( { 
                    assign_fn : 
                    function () {
                        which = arguments[0];
                    }
                } )
                ) ;
                tame.callChain([__tame_k]);
            };
            __tame_fn_3(tame.end);
            __tame_defers._fulfill();
        };
        var __tame_fn_4 = function (__tame_k) {
            console . log ( hosts [ which ] + " -> " + ips [ which ] ) ;
            tame.callChain([__tame_k]);
        };
        tame.callChain([__tame_fn_1, __tame_fn_2, __tame_fn_4, __tame_k]);
    };
    tame.callChain([__tame_fn_0, __tame_k]);
};
__tame_fn_5 (tame.end);